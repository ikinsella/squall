#!/bin/bash
# script for execution of deployed applications
#
# Sets up the MCR environment for the current $ARCH and executes
# the specified command.
#
cleanup() {

    # Remove source code archives from home directory
    {% for url in code_urls(batch) %}
    fname=$(basename "{{ url }}")
    if [ -f "$fname" ]; then
	rm -v "$fname"
    fi
    {% endfor %}

    # Remove data from home directory
    {% for url in data_urls(batch) %}
    fname=$(basename "{{ url }}")
    if [ -f "$fname" ]; then
	rm -v "$fname"
    fi
    {% endfor %}

    echo "all clean"
}

abort() {
  echo >&2 '
*************
** ABORTED **
*************
'
  echo >&2 "Files at time of error/interrupt"
  echo >&2 "--------------------------------"
  ls >&2 -l

  cleanup

  echo "An error occured. Exiting ..." >&2
  exit 1
}

success() {
  echo '
*************
** SUCCESS **
*************
'
  cleanup

  exit 0
}

# Run the abort function, if failure
trap abort EXIT SIGTERM

# Ensure that script exits if any command fails
set -e

# Download source code archives listed in URLS
{% for url in code_urls(batch) %}
fname=$(basename "{{ url }}")
echo "Downloading $fname from {{ url }}..."
wget -q "{{ url }}"
# If failed, retry download up to 5 times 
DOWNLOAD_STATUS=$?
i=0
while [ ! $DOWNLOAD_STATUS -eq 0 ] && [ $i -lt 5 ] ; do
    echo "Download failed, cleaning up and retrying..."
    rm -v "$fname"
    wget -q "{{ url }}"
    DOWNLOAD_STATUS=$?
    i++
done
echo "SUCCESS! Untarring $fname ..."
{# Unzip directory #}
tar xvzf "$fname"
{% endfor %}

# Download all data files listed in URLS
{% for url in data_urls(batch) %}
fname=$(basename "{{ url }}")
echo "Downloading $fname from {{ url }}..."
wget -q "{{ url }}"
DOWNLOAD_STATUS=$?
i=0
while [ ! $DOWNLOAD_STATUS -eq 0 ] && [ $i -lt 5 ] ; do
    echo "Download failed, cleaning up and retrying..."
    rm "$fname$"
    wget -q "{{ url }}"
    DOWNLOAD_STATUS=$?
    i++
done
{% endfor %}

{# Run the setup scripts #}
echo "Setting up environment..."
{% for setup_script in setup_scripts(batch) %}
echo "sourcing {{ setup_script }} ..."
source "{{ setup_script }}"
{% endfor %}

echo "Environment successfully setup, running executable..."
{# Execute Application #}
exe_dir=`dirname "$0"`
eval "${exe_dir}/{{ executable(batch) }}"

# Exit Successfully
trap success EXIT SIGTERM
