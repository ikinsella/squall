#!/bin/bash
# script for execution of deployed applications
#
# Sets up the MCR environment for the current $ARCH and executes
# the specified command.
#
cleanup() {

    # Remove source code archives from home directory
    {% for url in code_urls(batch) %}
    fname=$(basename "{{ url }}")
    if [ -f "$fname" ]; then
	rm -v "$fname"
    fi
    {% endfor %}

    # Remove data from home directory
    {% for url in data_urls(batch) %}
    fname=$(basename "{{ url }}")
    if [ -f "$fname" ]; then
	rm -v "$fname"
    fi
    {% endfor %}

    echo "all clean"
}

download() {
    url=$1
    try=0
    name=$(basename "$url")
    DOWNLOAD_STATUS=1
    while [ $DOWNLOAD_STATUS -gt 0 ]; do
	# If retrying, clean up from last attempt
	if [ $try -gt 0 ]; then
	    echo "Download failed, cleaning up and retrying..."
	    rm -f $name
	fi
	# Download file and verify success
	wget "${url}"
	DOWNLOAD_STATUS=$?
	# If .md5 exists, use it to verify download integrity
	set +e
	wget --spider "${url}.md5"
	MD5=$?
	set -e
	if [ $MD5 -eq 0 ]; then
	    echo "Downloading md5 hash to verify file integrity"
	    wget "${url}.md5"
	    md5sum -c "./${name}.md5"
	    DOWNLOAD_STATUS=$?
	    rm -f "${name}.md5"
	fi
	# If download failed, retry up to 5 times
	try=$((try+1))
	if [ $try -gt 5 ]; then
	    echo "Download exceeded max tries. Exiting...";
	    exit;
	fi
    done
}

abort() {
  echo >&2 '
*************
** ABORTED **
*************
'
  echo >&2 "Files at time of error/interrupt"
  echo >&2 "--------------------------------"
  ls >&2 -l

  cleanup

  echo "An error occured. Exiting ..." >&2
  exit 1
}

success() {
  echo '
*************
** SUCCESS **
*************
'
  cleanup

  exit 0
}

# Run the abort function, if failure
trap abort EXIT SIGTERM

# Ensure that script exits if any command fails
set -e

# Download source code listed in Implementation URLS
{% for url in code_urls(batch) %}
fname=$(basename "{{ url }}")
echo "Downloading $fname from {{ url }} ..."
download "{{ url }}"
echo "SUCCESS! Untarring $fname into $(pwd) ..."
tar xzf "$fname"
{% endfor %}

# Download data files listed in Data Set URLS
{% for url in data_urls(batch) %}
fname=$(basename "{{ url }}")
echo "Downloading $fname from {{ url }} ..."
download "{{ url }}"
echo "SUCCESS! $fname placed in $(pwd) ..."
{% endfor %}

# Run all Implementation setup scripts
echo "Setting up environment..."
{% for setup_script in setup_scripts(batch) %}
echo "sourcing {{ setup_script }} ..."
source "{{ setup_script }}"
{% endfor %}

# Execute Application
echo "Environment successfully setup, running executable..."
exe_dir=`dirname "$0"`
eval "${exe_dir}/{{ executable(batch) }}"

# Exit Successfully
trap success EXIT SIGTERM
